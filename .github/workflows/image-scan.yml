name: Image Scan

on:
  workflow_call:
    inputs:
      # Space-separated list of images.
      images:
        required: true
        type: string
    secrets:
      # Docker username.
      DOCKER_USERNAME:
        required: true
      # Docker password.
      DOCKER_PASSWORD:
        required: true
      # Lacework account name.
      LW_ACCOUNT_NAME:
        required: true
      # Lacework access token.
      LW_ACCESS_TOKEN:
        required: true
      # Aqua account name for scanner image retrieval.
      AQUA_ACCOUNT_NAME:
        required: true
      # Aqua account password for scanner image retrieval.
      AQUA_ACCOUNT_PASS:
        required: true
      # Aqua access token for running scans.
      AQUA_ACCESS_TOKEN:
        required: true
      # Aqua server url for running scans.
      AQUASEC_SERVER_URL:
        required: true
      # Aqua scanner docker image for running scans.
      AQUA_IMAGE:
        required: true

jobs:
  # Setup for matrix run.
  setup:
    runs-on: ubuntu-latest
    outputs:
      imagesJson: ${{ steps.setup.outputs.imagesJson }}
    steps:
      - id: setup
        run: |
          imagesJson=$(echo '${{ inputs.images }}' | sed -e 's/^/["/' -e 's/ /","/g' -e 's/$/"]/')
          echo "imagesJson=$imagesJson" >> $GITHUB_OUTPUT

  # Run Lacework scan for all images.
  lacework-scan:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        image: ${{fromJson(needs.setup.outputs.imagesJson)}}
    steps:
      - uses: actions/checkout@v2.3.4 # Necessary to access local action
      - name: Call Lacework scan
        id: run-scan
        uses: ./.github/actions/action-lacework-scan/
        with:
          image: ${{ matrix.image }}
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          lw-account-name: ${{ secrets.LW_ACCOUNT_NAME }}
          lw-access-token: ${{ secrets.LW_ACCESS_TOKEN }}
        env:
          ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}

      - name: Prepare the result for saving
        id: prepare-save
        run: |
          safeImageId=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
          fileName=${safeImageId}.lacework-result.json
          echo '${{ steps.run-scan.outputs.result-json }}' > $fileName
          echo "file-name=$fileName" >> $GITHUB_OUTPUT

      - name: Save the result as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare-save.outputs.file-name }}
          path: ${{ steps.prepare-save.outputs.file-name }}
          if-no-files-found: error

  # Run Aqua scan for all images.
  aqua-scan:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        image: ${{fromJson(needs.setup.outputs.imagesJson)}}
    steps:
      - uses: actions/checkout@v2.3.4 # Necessary to access local action
      - name: Call Aqua scan
        id: run-scan
        uses: ./.github/actions/action-aqua-scan/
        with:
          image: ${{ matrix.image }}
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          aqua-account-name: ${{ secrets.AQUA_ACCOUNT_NAME }}
          aqua-account-password: ${{ secrets.AQUA_ACCOUNT_PASS }}
          aqua-access-token: ${{ secrets.AQUA_ACCESS_TOKEN }}
          aquasec-server-url: ${{ secrets.AQUASEC_SERVER_URL }}
          aqua-image: ${{ secrets.AQUA_IMAGE }}
        env:
          ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}

      - name: Prepare the result for saving
        id: prepare-save
        run: |
          safeImageId=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
          fileName=${safeImageId}.aqua-result.json
          echo '${{ steps.run-scan.outputs.result-json }}' > $fileName
          echo "file-name=$fileName" >> $GITHUB_OUTPUT

      - name: Save the result as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare-save.outputs.file-name }}
          path: ${{ steps.prepare-save.outputs.file-name }}
          if-no-files-found: error

  # Evaluate scan results.
  evaluate-results:
    needs: [ lacework-scan, aqua-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all results from artifacts
        uses: actions/download-artifact@v3

      - name: Build and set job summary
        shell: bash
        run: |
          # Highlight number in table cell.
          _hln() {
            if [ ${1} -gt 0 ]; then
              echo "**${1}** :x:"
            else
              echo "${1} :heavy_check_mark:"
            fi
          }
          _jq() {
            echo $row | jq -r ${1}
          }
          summaryForScanner() {
            for resultJSONFile in $1; do
              image=$(jq -r '.image' $resultJSONFile)
              cveC=$(jq -r '.stats.Critical.total' $resultJSONFile)
              cveH=$(jq -r '.stats.High.total' $resultJSONFile)
              cveM=$(jq -r '.stats.Medium.total' $resultJSONFile)
              cveL=$(jq -r '.stats.Low.total' $resultJSONFile)
              cveI=$(jq -r '.stats.Info.total' $resultJSONFile)
          
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### $image" >> $GITHUB_STEP_SUMMARY
          
              echo "| Critical | High | Medium | Low | Info |" >> $GITHUB_STEP_SUMMARY
              echo "|---|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
              echo "| $(_hln $cveC) | $(_hln $cveH) | $cveM | $cveL | $cveI |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
          
              # Print Vulnerability table (if not empty).
              cveCount=$(jq -r '.vulnerabilities | length' $resultJSONFile)
              echo $2
              if [ $cveCount -gt 0 ]; then
                if [ "$2" = "aqua" ]; then
                  echo "|Vulnerability|Severity|Package|Current version|Fix version|" >> $GITHUB_STEP_SUMMARY
                  echo "|---|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
                  for row in $(jq -r '.vulnerabilities[] | @base64' $resultJSONFile); do
                    row=$(echo ${row} | base64 --decode)
                    echo "| [$(_jq '.vulnId')]($(_jq '.link')) | $(_jq '.severity') | $(_jq '.package') | $(_jq '.currentVersion') | $(_jq '.fixVersion') |" >> $GITHUB_STEP_SUMMARY
                  done
                else
                  echo "|Vulnerability|Severity|Package|Current version|Fix version|Status|" >> $GITHUB_STEP_SUMMARY
                  echo "|---|---|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
                  for row in $(jq -r '.vulnerabilities[] | @base64' $resultJSONFile); do
                  row=$(echo ${row} | base64 --decode)
                  echo "| [$(_jq '.vulnId')]($(_jq '.link')) | $(_jq '.severity') | $(_jq '.package') | $(_jq '.currentVersion') | $(_jq '.fixVersion') | $(_jq '.status') |" >> $GITHUB_STEP_SUMMARY
                  done
                fi
              fi
            done
          }
          lwResultFiles="$(find . -type f -name '*.lacework-result.json' | sort)"
          aquaResultFiles="$(find . -type f -name '*.aqua-result.json' | sort)"
          echo "## <a name=\"scan-results\"></a>Lacework scan results" >> $GITHUB_STEP_SUMMARY
          summaryForScanner "$lwResultFiles" "lw"
          echo "## <a name=\"scan-results\"></a>Aqua scan results" >> $GITHUB_STEP_SUMMARY
          summaryForScanner "$aquaResultFiles" "aqua"

      - name: Build PR comment
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        id: build-pr-comment
        shell: bash
        run: |
          createPRCommentTable() {
            comment="${comment}\n| Image | Critical | High | Medium | Low | Info |"
            comment="${comment}\n|---|---|---|---|---|---|"
            
            for resultJSONFile in $1; do
              image=$(jq -r '.image' $resultJSONFile)
              cveC=$(jq -r '.stats.Critical.total' $resultJSONFile)
              cveH=$(jq -r '.stats.High.total' $resultJSONFile)
              cveM=$(jq -r '.stats.Medium.total' $resultJSONFile)
              cveL=$(jq -r '.stats.Low.total' $resultJSONFile)
              cveI=$(jq -r '.stats.Info.total' $resultJSONFile)
              comment="${comment}\n| ${image} | $(_hln $cveC) | $(_hln $cveH) | $cveM | $cveL | $cveI |"
            done
          }
          setStatusIcon(){
            statusIcon=":green_circle:"
            for resultJSONFile in $1; do
              cveC=$(jq -r '.stats.Critical.total' $resultJSONFile)
              cveH=$(jq -r '.stats.High.total' $resultJSONFile)
              if [ $cveC -gt 0 ] || [ $cveH -gt 0 ]; then
                statusIcon=":red_circle:"
                break
              fi
            done       
          }
          # Highlight number in table cell.
          _hln() {
            if [ ${1} -gt 0 ]; then
              echo "**${1}** :x:"
            else
              echo "${1} :heavy_check_mark:"
            fi
          }   
          lwResultFiles="$(find . -type f -name '*.lacework-result.json' | sort)"
          
          setStatusIcon "$lwResultFiles"
          comment="### ${statusIcon}&nbsp; Lacework scan results:"
          createPRCommentTable "$lwResultFiles"
          
          aquaResultFiles="$(find . -type f -name '*.aqua-result.json' | sort)"
          
          setStatusIcon "$aquaResultFiles"
          comment="${comment}\n### ${statusIcon}&nbsp; Aqua scan results:"
          createPRCommentTable "$aquaResultFiles"
          
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#user-content-scan-results"
          comment="${comment}\n\n<sup>[Go to job summary for more details...]($runUrl)</sup>"
          
          # Set multiline output.
          echo 'comment<<EOF' >> $GITHUB_OUTPUT
          echo -e "$comment" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Add PR comment (if content changed)
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        uses: actions/github-script@v6
        with:
          retries: 3
          retry-exempt-status-codes: 400,401
          script: |
            function removeDynamicValues(body) {
              // remove links and dynamic image tag hashes
              return body
                 .replace(/\]\(http[^)]+\)/gm, "](#)")
                 .replace(/(docker\.io\/[^ ]+)-\w{7}/gm, "$1-#######")
            }
            
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })
            
            // Find last bot comment.
            const lastBotComment = comments.slice().reverse().find(comment => comment.user.login === 'github-actions[bot]')
            
            const newCommentBody = `${{ steps.build-pr-comment.outputs.comment }}`
            if (!lastBotComment || removeDynamicValues(newCommentBody) !== removeDynamicValues(lastBotComment.body)) {
              // Add new comment.
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: newCommentBody
              })
            } else {
              console.log("No changes, nothing to do.")
            }
